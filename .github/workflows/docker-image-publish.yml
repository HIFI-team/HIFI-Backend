# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Push Image to DockerHub

on:
  push:
    branches: [main]
    # Publish semver tags as releases.
    # tags: ['v*.*.*']

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      #JDK Setting
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          
      #Gradle Caching
      - name: Cache Gradle packages
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
          restore-keys: ${{ runner.os }}-gradle-
      
      #Grant gradlew Permission
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      #Create dotenv file
      - name: Make env file
        run: |
          touch ./.env
          echo "$ENV_PROPERTIES_DEV" > ./.env
        env:
          ENV_PROPERTIES_DEV: ${{ secrets.ENV_PROPERTIES_DEV }}

      #Gradle Build
      - name: Build with Gradle
        run: ./gradlew build -x test

      #Image Tagging
      - name: Docker meta
        id: docker_meta
        uses: crazy-max/ghaction-docker-meta@v1
        with:
          images: ${{ secrets.DOCKER_REPOSITORY }}/hifi-dev
          tag-semver: |
            {{version}}
            {{major}}.{{minor}}

      #Docker Buildx Setup
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      #Login to DockerHub
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      #Docker Build and Push
      - name: Docker build & push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}

      #Using Dev Server

      #Create Remote Directory
      - name: create remote directory
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DEV }}
          username: ${{ secrets.USERNAME }}
          #password: ${{ secrets.PASSWORD }}
          key: ${{ secrets.KEY_DEV }}
          script: mkdir -p ~/srv/ubuntu/hifi_dev

      #Copy Source
      - name: copy source via ssh key
        uses: burnett01/rsync-deployments@4.1
        with:
          switches: -avzr --delete
          remote_path: ~/srv/ubuntu/
          remote_host: ${{ secrets.HOST_DEV }}
          remote_user: ${{ secrets.USERNAME }}
          remote_key: ${{ secrets.KEY_DEV }}

      #Execute
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST_DEV }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY_DEV }}
          script: |
            sh ~/srv/ubuntu/config/scripts/deploy.sh
            sudo docker image prune -a
            sudo docker-compose -f ~/srv/ubuntu/docker-compose.yml pull
            sudo docker-compose -f ~/srv/ubuntu/docker-compose.yml up --build -d
